# === Adições no app.py (copie e cole) ===

# 1) ROTAS DE EXCLUSÃO (cole próximo das outras rotas de admin)

@app.route("/admin/products/<int:pid>/delete", methods=["POST"])
def admin_products_delete(pid):
    if require_role("admin"): return require_role("admin")
    conn = get_db()
    used_rule = conn.execute("SELECT 1 FROM rules WHERE product_id=? LIMIT 1", (pid,)).fetchone()
    used_item = conn.execute("SELECT 1 FROM purchase_items WHERE product_id=? LIMIT 1", (pid,)).fetchone()
    if used_rule or used_item:
        conn.close()
        flash("Não é possível excluir: produto em uso (regras ou pedidos).", "error")
        return redirect(url_for("admin_products"))
    conn.execute("DELETE FROM products WHERE id=?", (pid,))
    conn.commit(); conn.close()
    audit("product_delete", f"id={pid}")
    flash("Produto excluído.", "success")
    return redirect(url_for("admin_products"))

@app.route("/admin/suppliers/<int:sid>/delete", methods=["POST"])
def admin_suppliers_delete(sid):
    if require_role("admin"): return require_role("admin")
    conn = get_db()
    used_rule = conn.execute("SELECT 1 FROM rules WHERE supplier_id=? LIMIT 1", (sid,)).fetchone()
    used_order = conn.execute("SELECT 1 FROM purchase_orders WHERE supplier_id=? LIMIT 1", (sid,)).fetchone()
    if used_rule or used_order:
        conn.close()
        flash("Não é possível excluir: fornecedor em uso (regras ou pedidos).", "error")
        return redirect(url_for("admin_suppliers"))
    conn.execute("DELETE FROM suppliers WHERE id=?", (sid,))
    conn.commit(); conn.close()
    audit("supplier_delete", f"id={sid}")
    flash("Fornecedor excluído.", "success")
    return redirect(url_for("admin_suppliers"))

@app.route("/admin/orders/<int:oid>/delete", methods=["POST"])
def admin_orders_delete(oid):
    if require_role("admin"): return require_role("admin")
    conn = get_db()
    conn.execute("DELETE FROM payments WHERE order_id=?", (oid,))
    conn.execute("DELETE FROM purchase_items WHERE order_id=?", (oid,))
    cur = conn.execute("DELETE FROM purchase_orders WHERE id=?", (oid,))
    conn.commit(); conn.close()
    if cur.rowcount:
        audit("order_delete", f"id={oid}")
        flash("Pedido excluído.", "success")
    else:
        flash("Pedido não encontrado.", "error")
    return redirect(url_for("compras_lista"))

# 2) ATUALIZAÇÃO NA FUNÇÃO DO EXCEL (substitua a função generate_excel_for_date por esta)

def generate_excel_for_date(day_str: str) -> str:
    """
    Gera (ou sobrescreve) o Excel do dia especificado (YYYY-MM-DD),
    com colunas: Fornecedor, Produto, Dioptria, Data, Valor (subtotal do item).
    Considera itens dos pedidos marcados como pagos naquele dia.
    """
    ensure_reports_dir()
    out_path = os.path.join(REPORTS_DIR, f"payments_{day_str}.xlsx")

    conn = get_db()
    rows = conn.execute("""
        SELECT
            s.name  AS fornecedor,
            p.name  AS produto,
            i.sphere, i.cylinder, i.base, i.addition,
            i.quantity, i.unit_price,
            substr(pay.paid_at,1,10) AS data
        FROM payments pay
        JOIN purchase_orders o ON o.id = pay.order_id
        JOIN suppliers s       ON s.id = o.supplier_id
        JOIN purchase_items i  ON i.order_id = o.id
        JOIN products p        ON p.id = i.product_id
        WHERE substr(pay.paid_at,1,10) = ?
        ORDER BY s.name, p.name
    """, (day_str,)).fetchall()
    conn.close()

    from openpyxl import Workbook
    from openpyxl.utils import get_column_letter

    wb = Workbook(); ws = wb.active; ws.title = "Pagamentos do Dia"
    headers = ["Fornecedor", "Produto", "Dioptria", "Data", "Valor"]
    ws.append(headers)

    def fmt_dioptria(sphere, cylinder, base, addition):
        if sphere is not None or cylinder is not None:
            esf = f"{sphere:+.2f}" if sphere is not None else "-"
            cil = f"{cylinder:+.2f}" if cylinder is not None else "-"
            return f"Esf {esf} / Cil {cil}"
        else:
            b = f"{base:.2f}" if base is not None else "-"
            add = f"+{addition:.2f}" if addition is not None else "-"
            return f"Base {b} / Adição {add}"

    for r in rows:
        subtotal = (r["quantity"] or 0) * (r["unit_price"] or 0.0)
        ws.append([
            r["fornecedor"],
            r["produto"],
            fmt_dioptria(r["sphere"], r["cylinder"], r["base"], r["addition"]),
            r["data"],
            float(f"{subtotal:.2f}")
        ])

    for i,w in enumerate([18,28,24,12,12],1):
        ws.column_dimensions[get_column_letter(i)].width = w

    wb.save(out_path)
    return out_path
